version: 2.1

yaml_anchors:
  # This snippet requires that the docker-hub-login context is added to the workflow
  docker_hub_login: &docker_hub_login
    run:
      name: Login to Docker Hub
      command: |
        echo "$GREMLIN_DOCKER_PASSWORD" | docker login -u="$GREMLIN_DOCKER_USERNAME" --password-stdin

jobs:
  build_for:
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    steps:
      - checkout
      - *docker_hub_login
      - run: docker build --force-rm -t multi-arch-fuff-stage .
      # Show the human what we built
      - run: docker image inspect multi-arch-fuff-stage | grep "Architecture"
      # Show the human what we were supposed to build
      - run: echo "export TARGET_ARCHITECTURE=$(dpkg --print-architecture)" >> $BASH_ENV
      - run: printf "\n>%s<\n\n" ${TARGET_ARCHITECTURE}
      # For some reason when the following is run by the CircleCI runner two NULLs are prefixed to
      # the output.  Those NULLs are converted to ^@ (presumably by Bash).  The tr command deletes
      # the errant garbage.  The problem occurs nowhere else.  Methinks the CircleCI runner has a
      # buffering bug.
      - run: echo "export RUST_VERSION=$(docker run --rm --entrypoint /bin/sh multi-arch-fuff-stage -c 'printf $RUST_VERSION' | tr -d '^@')" >> $BASH_ENV
      - run: printf "\n>%s<\n\n" ${RUST_VERSION}
      # We're going to tag latest and a version specific image
      - run: echo "export DOCKER_IMAGE_1=codingbadly/multi-arch-fuff:${RUST_VERSION}-${TARGET_ARCHITECTURE}" >> $BASH_ENV
      - run: printf "\n>%s<\n\n" ${DOCKER_IMAGE_1}
      - run: echo "export DOCKER_IMAGE_2=codingbadly/multi-arch-fuff:latest-${TARGET_ARCHITECTURE}" >> $BASH_ENV
      - run: printf "\n>%s<\n\n" ${DOCKER_IMAGE_2}
      # Do the tagging
      - run: docker tag multi-arch-fuff-stage ${DOCKER_IMAGE_1}
      - run: docker tag multi-arch-fuff-stage ${DOCKER_IMAGE_2}
      # Push it
      - run: docker push ${DOCKER_IMAGE_1}
      - run: docker push ${DOCKER_IMAGE_2}
      # Save the Rust version for the downstream step
      - run: mkdir -p workspace
      - run: printf "export RUST_VERSION=\"%s\"\n" ${RUST_VERSION} > workspace/${TARGET_ARCHITECTURE}
      - persist_to_workspace:
          root: workspace
          paths: "*"

  build_manifest:
    machine:
      image: ubuntu-2004:current
    resource_class: medium
    steps:
      - attach_workspace:
          at: workspace
      # The two upstream steps had better have built exactly the same thing
      - run: cmp workspace/amd64 workspace/arm64
      # Make the Rust version available as an environment variable (and show the human)
      - run: cat workspace/amd64 >> $BASH_ENV
      - run: printf "\n>%s<\n\n" ${RUST_VERSION}
      # Create then push the two manifests
      - *docker_hub_login
      - run: docker manifest create codingbadly/multi-arch-fuff:${RUST_VERSION} >
          --amend codingbadly/multi-arch-fuff:${RUST_VERSION}-amd64
          --amend codingbadly/multi-arch-fuff:${RUST_VERSION}-arm64
      - run: docker manifest push codingbadly/multi-arch-fuff:${RUST_VERSION}
      - run: docker manifest create codingbadly/multi-arch-fuff:latest >
          --amend codingbadly/multi-arch-fuff:${RUST_VERSION}-amd64
          --amend codingbadly/multi-arch-fuff:${RUST_VERSION}-arm64
      - run: docker manifest push codingbadly/multi-arch-fuff:latest

executors:
  amd64:
    machine:
      image: ubuntu-2004:2022.04.1
    resource_class: medium
  arm64:
    machine:
      image: ubuntu-2004:2022.04.1
    resource_class: arm.medium

workflows:
  build_all:
    jobs:
      - build_for:
          context: docker-hub-login
          matrix:
            parameters:
              platform: [amd64, arm64]
      - build_manifest:
          context: docker-hub-login
          requires:
            - build_for
